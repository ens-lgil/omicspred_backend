# Generated by Django 4.2 on 2023-04-20 12:35

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_short', models.CharField(db_index=True, max_length=100, verbose_name='Cohort Short Name')),
                ('name_full', models.CharField(max_length=1000, verbose_name='Cohort Full Name')),
                ('name_others', models.TextField(null=True, verbose_name='Previous/other/additional names (e.g. sub-cohorts)')),
                ('url', models.CharField(max_length=100, verbose_name='Cohort URL')),
            ],
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Omics entity name')),
                ('external_id', models.CharField(db_index=True, max_length=100, null=True, verbose_name='External ID')),
                ('external_id_source', models.CharField(max_length=100, null=True, verbose_name='External ID Source')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementContext',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Measurement name')),
                ('type', models.CharField(max_length=100, verbose_name='Measurement type')),
                ('additional_info', models.CharField(max_length=250, verbose_name='Additional Information')),
            ],
        ),
        migrations.CreateModel(
            name='Metabolite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Omics entity name')),
                ('external_id', models.CharField(db_index=True, max_length=100, null=True, verbose_name='External ID')),
                ('external_id_source', models.CharField(max_length=100, null=True, verbose_name='External ID Source')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pathway',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Omics entity name')),
                ('external_id', models.CharField(db_index=True, max_length=100, null=True, verbose_name='External ID')),
                ('external_id_source', models.CharField(max_length=100, null=True, verbose_name='External ID Source')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Platform name')),
                ('version', models.CharField(max_length=50, verbose_name='Platform version')),
                ('technic', models.CharField(max_length=100, verbose_name='Platform technic')),
                ('type', models.CharField(max_length=100, verbose_name='Platform type')),
            ],
        ),
        migrations.CreateModel(
            name='Protein',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Omics entity name')),
                ('external_id', models.CharField(db_index=True, max_length=100, null=True, verbose_name='External ID')),
                ('external_id_source', models.CharField(max_length=100, null=True, verbose_name='External ID Source')),
                ('gene', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gene_protein', to='omicspred.gene', verbose_name='Associated Gene')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pmid', models.IntegerField(verbose_name='PubMed ID (PMID)')),
                ('doi', models.CharField(max_length=100, verbose_name='digital object identifier (doi)')),
                ('journal', models.CharField(max_length=100, verbose_name='Journal Name')),
                ('firstauthor', models.CharField(max_length=50, verbose_name='First Author')),
                ('authors', models.TextField(verbose_name='Authors')),
                ('title', models.TextField(verbose_name='Title')),
                ('date_publication', models.DateField(verbose_name='Publication Date')),
                ('date_released', models.DateField(db_index=True, null=True, verbose_name='OmicsPred Release Date')),
                ('curation_status', models.CharField(choices=[('C', 'Curated'), ('ID', 'Curated - insufficient data'), ('IP', 'Curation in Progress'), ('AW', 'Awaiting Curation'), ('E', 'Embargoed')], default='AW', max_length=2, verbose_name='Curation Status')),
                ('curation_notes', models.TextField(default='', verbose_name='Curation Notes')),
            ],
            options={
                'get_latest_by': 'id',
            },
        ),
        migrations.CreateModel(
            name='Transcript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Omics entity name')),
                ('external_id', models.CharField(db_index=True, max_length=100, null=True, verbose_name='External ID')),
                ('external_id_source', models.CharField(max_length=100, null=True, verbose_name='External ID Source')),
                ('gene', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gene_transcript', to='omicspred.gene', verbose_name='Associated Gene')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('num', models.IntegerField(primary_key=True, serialize=False, verbose_name='OmicsPred Number')),
                ('id', models.CharField(db_index=True, max_length=30, verbose_name='OmicsPred ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='OmicsPred Name')),
                ('trait_reported', models.TextField(verbose_name='Reported Trait')),
                ('trait_additional', models.TextField(null=True, verbose_name='Additional Trait Information')),
                ('method_name', models.TextField(verbose_name='Score Development Method')),
                ('method_params', models.TextField(null=True, verbose_name='Score Development Details/Relevant Parameters')),
                ('variants_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number of Variants')),
                ('variants_interactions', models.IntegerField(default=0, verbose_name='Number of Interaction Terms')),
                ('variants_genomebuild', models.CharField(default='NR', max_length=10, verbose_name='Original Genome Build')),
                ('date_released', models.DateField(db_index=True, null=True, verbose_name='OmicsPred Release Date')),
                ('curation_notes', models.TextField(default='', verbose_name='Curation Notes')),
                ('gene', models.ManyToManyField(related_name='gene_score', to='omicspred.gene', verbose_name='Gene(s)')),
                ('measurement_contexts', models.ManyToManyField(related_name='score_measurements', to='omicspred.measurementcontext', verbose_name='Measurement Context')),
                ('metabolite', models.ManyToManyField(related_name='metabolite_score', to='omicspred.metabolite', verbose_name='Metabolite(s)')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='platform_score', to='omicspred.platform', verbose_name='Platform')),
                ('protein', models.ManyToManyField(related_name='protein_score', to='omicspred.protein', verbose_name='Protein(s)')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='publication_score', to='omicspred.publication', verbose_name='Publication')),
                ('transcript', models.ManyToManyField(related_name='transcript_score', to='omicspred.transcript', verbose_name='Transcript(s)')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_version', models.CharField(max_length=50, verbose_name='Platform version')),
                ('tissue_name', models.CharField(max_length=100, null=True, verbose_name='Tissue name')),
                ('sample_number', models.IntegerField(null=True, verbose_name='Number of Individuals')),
                ('sample_percent_male', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percent of Participants Who are Male')),
                ('sample_age', models.IntegerField(null=True, verbose_name='Sample Age')),
                ('ancestry_broad', models.CharField(max_length=250, verbose_name='Broad Ancestry Category')),
                ('ancestry_free', models.TextField(null=True, verbose_name='Ancestry (e.g. French, Chinese)')),
                ('ancestry_country', models.TextField(null=True, verbose_name='Country of Recruitment')),
                ('ancestry_additional', models.TextField(null=True, verbose_name='Additional Ancestry Description')),
                ('source_gwas_catalog', models.CharField(max_length=20, null=True, verbose_name='GWAS Catalog Study ID (GCST...)')),
                ('source_pmid', models.IntegerField(null=True, verbose_name='Source PubMed ID (PMID)')),
                ('source_doi', models.CharField(max_length=100, null=True, verbose_name='Source DOI')),
                ('cohorts_additional', models.TextField(null=True, verbose_name='Additional Sample/Cohort Information')),
                ('curation_notes', models.TextField(default='', verbose_name='Curation Notes')),
                ('cohorts', models.ManyToManyField(to='omicspred.cohort', verbose_name='Cohort(s)')),
            ],
        ),
        migrations.CreateModel(
            name='PublicationPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('omics_count', models.IntegerField(verbose_name='Omics Entities count')),
                ('omics_type', models.CharField(max_length=50, verbose_name='Omics type')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='platform_pp', to='omicspred.platform', verbose_name='Platform')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='publication_pp', to='omicspred.publication', verbose_name='Publication')),
            ],
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eval_type', models.CharField(choices=[('T', 'Training'), ('IV', 'Independent Validation'), ('EV', 'External Validation'), ('E', 'Evaluation')], default='', max_length=2, verbose_name='Evaluation Type')),
                ('performance_additional', models.TextField(default='', verbose_name='Additional Information')),
                ('curation_notes', models.TextField(default='', verbose_name='Curation Notes')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='publication_performance', to='omicspred.publication', verbose_name='Peformance Source')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sample_performance', to='omicspred.sample', verbose_name='Peformance Sample')),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='omicspred.score', verbose_name='Score')),
            ],
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('performance_type', models.CharField(choices=[('PC', "Pearson's correlation"), ('SC', "Spearman's rank correlation")], db_index=True, default='Performance Type', max_length=40)),
                ('name', models.CharField(max_length=100, verbose_name='Performance Metric Name')),
                ('name_short', models.CharField(max_length=20, null=True, verbose_name='Performance Metric Name (Short)')),
                ('source', models.CharField(max_length=100, null=True, verbose_name='Performance Metric  Source')),
                ('estimate', models.FloatField(verbose_name='Estimate')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metric', to='omicspred.performance', verbose_name='PGS Performance Metric (PPM)')),
            ],
        ),
        migrations.AddField(
            model_name='metabolite',
            name='pathway_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pathway_group_metabolite', to='omicspred.pathway', verbose_name='Associated Pathway Group'),
        ),
        migrations.AddField(
            model_name='metabolite',
            name='pathway_subgroup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pathway_subgroup_metabolite', to='omicspred.pathway', verbose_name='Associated Pathway Subgroup'),
        ),
    ]
